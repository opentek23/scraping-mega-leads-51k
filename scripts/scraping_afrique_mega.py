#!/usr/bin/env python3
"""
üåç SCRAPING AFRIQUE - 8 CIBLES SP√âCIFIQUES
Consultants, Entrepreneurs, Managers, Cr√©ateurs, Personnalit√©s, Entreprises, Artistes, Musiciens
"""

import requests
from bs4 import BeautifulSoup
import json
import csv
import time
import random
import os
import re
from datetime import datetime, timezone
import urllib.parse

class AfriqueScrapingComplet:
    def __init__(self):
        self.prospects = []
        self.session = requests.Session()
        
        # Headers
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'keep-alive'
        })
        
        # Configuration
        self.target_leads = int(os.environ.get('TARGET_LEADS', '100'))
        self.test_mode = os.environ.get('TEST_MODE', 'true').lower() == 'true'
        self.run_number = os.environ.get('RUN_NUMBER', '000')
        
        print(f"üéØ Target leads: {self.target_leads}")
        print(f"üß™ Test mode: {self.test_mode}")
        print(f"üî¢ Run number: {self.run_number}")
        
        # Configuration 8 cibles sp√©cifiques
        self.target_configs = {
            "consultants": {
                "titles": ["Consultant", "Business Consultant", "Strategy Consultant", "Management Consultant", "Expert", "Advisor"],
                "keywords": ["consulting", "strategy", "advisory", "expert", "specialist"],
                "github_search": "consultant advisor",
                "objective": self.target_leads // 8
            },
            "entrepreneurs": {
                "titles": ["CEO", "Founder", "Co-founder", "Entrepreneur", "Managing Director", "Executive"],
                "keywords": ["startup", "founder", "entrepreneur", "CEO", "business owner"],
                "github_search": "CEO founder entrepreneur",
                "objective": self.target_leads // 8
            },
            "managers": {
                "titles": ["Manager", "Director", "Country Manager", "Regional Manager", "Investment Manager"],
                "keywords": ["manager", "director", "investment", "operations", "business development"],
                "github_search": "manager director",
                "objective": self.target_leads // 8
            },
            "createurs": {
                "titles": ["Content Creator", "Influencer", "Digital Creator", "Social Media Manager", "Brand Ambassador"],
                "keywords": ["influencer", "creator", "content", "social media", "digital marketing"],
                "github_search": "content creator",
                "objective": self.target_leads // 8
            },
            "personnalites": {
                "titles": ["Public Figure", "Celebrity", "Author", "Speaker", "Thought Leader", "Activist"],
                "keywords": ["public figure", "author", "speaker", "leader", "activist"],
                "github_search": "author speaker",
                "objective": self.target_leads // 8
            },
            "entreprises": {
                "titles": ["Company", "Corporation", "Enterprise", "Business", "Startup", "Firm"],
                "keywords": ["company", "business", "enterprise", "startup", "organization"],
                "github_search": "company business",
                "objective": self.target_leads // 8
            },
            "artistes": {
                "titles": ["Artist", "Visual Artist", "Digital Artist", "Creative Director", "Designer"],
                "keywords": ["artist", "creative", "design", "art", "visual"],
                "github_search": "artist creative",
                "objective": self.target_leads // 8
            },
            "musiciens": {
                "titles": ["Musician", "Singer", "Producer", "DJ", "Music Producer", "Recording Artist"],
                "keywords": ["musician", "music", "producer", "singer", "DJ", "artist"],
                "github_search": "music producer",
                "objective": self.target_leads // 8
            }
        }
        
        # Pays africains cibl√©s
        self.african_countries = {
            'nigeria': {'cities': ['Lagos', 'Abuja', 'Port Harcourt', 'Kano'], 'code': '+234'},
            'kenya': {'cities': ['Nairobi', 'Mombasa', 'Kisumu'], 'code': '+254'},
            'ghana': {'cities': ['Accra', 'Kumasi', 'Tamale'], 'code': '+233'},
            'south_africa': {'cities': ['Cape Town', 'Johannesburg', 'Durban'], 'code': '+27'},
            'egypt': {'cities': ['Cairo', 'Alexandria', 'Giza'], 'code': '+20'},
            'morocco': {'cities': ['Casablanca', 'Rabat', 'Marrakech'], 'code': '+212'}
        }
    
    def safe_get(self, data, key, default=''):
        """R√©cup√©ration s√©curis√©e"""
        value = data.get(key, default) if data else default
        return value if value is not None else default
    
    def scrape_github_by_target(self, target_type, target_config):
        """Scrape GitHub par type de cible"""
        results = []
        
        try:
            print(f"  üíª GitHub {target_type}...")
            
            # Recherche par villes africaines + keywords
            cities = []
            for country_data in self.african_countries.values():
                cities.extend(country_data['cities'])
            
            # Limiter en mode test
            search_cities = cities[:3] if self.test_mode else cities[:6]
            
            for city in search_cities:
                search_query = f"location:{city} {target_config['github_search']}"
                search_url = f"https://api.github.com/search/users?q={urllib.parse.quote(search_query)}&sort=followers&per_page=5"
                
                try:
                    response = self.session.get(search_url, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        for user in data.get('items', []):
                            user_detail = self.get_github_user_details(user.get('login', ''))
                            
                            if user_detail:
                                # V√©rifier si le profil correspond au type recherch√©
                                if self.matches_target_type(user_detail, target_config):
                                    result = {
                                        'name': self.safe_get(user_detail, 'name', user.get('login', '')),
                                        'username': self.safe_get(user, 'login', ''),
                                        'bio': self.safe_get(user_detail, 'bio', ''),
                                        'company': self.safe_get(user_detail, 'company', ''),
                                        'location': self.safe_get(user_detail, 'location', city),
                                        'blog': self.safe_get(user_detail, 'blog', ''),
                                        'email': self.safe_get(user_detail, 'email', ''),
                                        'followers': self.safe_get(user, 'followers', 0),
                                        'platform': 'github',
                                        'github_url': self.safe_get(user, 'html_url', ''),
                                        'target_type': target_type,
                                        'country': self.determine_country_from_city(city),
                                        'search_city': city
                                    }
                                    results.append(result)
                    
                    else:
                        print(f"    ‚ö†Ô∏è GitHub API {city}: {response.status_code}")
                
                except Exception as e:
                    print(f"    ‚ùå Erreur {city}: {e}")
                
                time.sleep(1)  # Rate limiting
                
                # Limiter r√©sultats par cible
                if len(results) >= target_config['objective']:
                    break
        
        except Exception as e:
            print(f"‚ùå Erreur GitHub {target_type}: {e}")
        
        print(f"    ‚úÖ {target_type}: {len(results)} trouv√©s")
        return results
    
    def get_github_user_details(self, username):
        """D√©tails utilisateur GitHub"""
        try:
            if not username:
                return {}
                
            url = f"https://api.github.com/users/{username}"
            response = self.session.get(url, timeout=5)
            
            if response.status_code == 200:
                return response.json()
        except:
            pass
        return {}
    
    def matches_target_type(self, user_data, target_config):
        """V√©rifie si un profil correspond au type cible"""
        try:
            bio = self.safe_get(user_data, 'bio', '').lower()
            company = self.safe_get(user_data, 'company', '').lower()
            name = self.safe_get(user_data, 'name', '').lower()
            
            # Rechercher keywords dans bio/company/name
            search_text = f"{bio} {company} {name}"
            
            # V√©rifier si contient les mots-cl√©s du type
            for keyword in target_config['keywords']:
                if keyword.lower() in search_text:
                    return True
            
            # V√©rifier les titres
            for title in target_config['titles']:
                if title.lower() in search_text:
                    return True
            
            return True  # Accepter par d√©faut en mode test
            
        except:
            return True
    
    def generate_synthetic_prospects(self, target_type, country, count=3):
        """G√©n√®re des prospects synth√©tiques r√©alistes par type"""
        prospects = []
        
        # Templates par type de cible
        templates = {
            "consultants": [
                {"name": "Adebayo Ogundimu", "title": "Strategy Consultant", "company": "Lagos Consulting Group"},
                {"name": "Amina Hassan", "title": "Business Advisor", "company": "Cairo Business Solutions"},
                {"name": "Kwame Osei", "title": "Management Consultant", "company": "Accra Strategic Partners"}
            ],
            "entrepreneurs": [
                {"name": "Folake Adeyemi", "title": "CEO & Founder", "company": "Lagos Tech Innovations"},
                {"name": "David Kamau", "title": "Startup Founder", "company": "Nairobi Digital Solutions"},
                {"name": "Sarah van Niekerk", "title": "Co-founder", "company": "Cape Town Fintech"}
            ],
            "managers": [
                {"name": "Ibrahim Musa", "title": "Country Manager", "company": "Regional Investment Corp"},
                {"name": "Grace Wanjiku", "title": "Operations Director", "company": "East Africa Holdings"},
                {"name": "Omar Benali", "title": "Investment Manager", "company": "Maghreb Capital"}
            ],
            "createurs": [
                {"name": "Temi Adebola", "title": "Content Creator", "company": "Lagos Lifestyle Media"},
                {"name": "Nana Akoto", "title": "Digital Influencer", "company": "Ghana Creative Hub"},
                {"name": "Lerato Mokgosi", "title": "Brand Ambassador", "company": "SA Digital Agency"}
            ],
            "personnalites": [
                {"name": "Dr. Chimamanda Okoro", "title": "Author & Public Speaker", "company": "Pan-African Literature"},
                {"name": "Prof. Wole Adebayo", "title": "Thought Leader", "company": "African Leadership Institute"},
                {"name": "Aisha Abdullahi", "title": "Social Activist", "company": "Women Empowerment Africa"}
            ],
            "entreprises": [
                {"name": "Lagos Tech Hub", "title": "Technology Company", "company": "Innovation Center"},
                {"name": "Nairobi Solutions Ltd", "title": "Software Enterprise", "company": "Business Solutions"},
                {"name": "Cape Digital Corp", "title": "Digital Agency", "company": "Creative Services"}
            ],
            "artistes": [
                {"name": "Kemi Adebayo", "title": "Visual Artist", "company": "Lagos Art Gallery"},
                {"name": "Kofi Asante", "title": "Digital Creator", "company": "Accra Creative Studio"},
                {"name": "Amara Okafor", "title": "Creative Director", "company": "African Art Collective"}
            ],
            "musiciens": [
                {"name": "Ayo Balogun", "title": "Afrobeats Producer", "company": "Lagos Music Studios"},
                {"name": "Sauti Moja", "title": "Recording Artist", "company": "East Africa Records"},
                {"name": "Stonebwoy Junior", "title": "Musician", "company": "Ghana Music Label"}
            ]
        }
        
        # G√©n√©rer prospects pour ce type
        template_list = templates.get(target_type, templates["entrepreneurs"])
        
        for i in range(min(count, len(template_list))):
            template = template_list[i]
            
            prospect = {
                'name': template['name'],
                'username': template['name'].lower().replace(' ', '_'),
                'bio': f"{template['title']} at {template['company']}",
                'company': template['company'],
                'location': self.get_main_city_for_country(country),
                'email': self.generate_email_for_name(template['name']),
                'phone': self.generate_phone_for_country(country),
                'followers': random.randint(100, 5000),
                'platform': 'synthetic',
                'github_url': f"https://linkedin.com/in/{template['name'].lower().replace(' ', '-')}",
                'target_type': target_type,
                'country': country,
                'title': template['title'],
                'synthetic': True
            }
            prospects.append(prospect)
        
        return prospects
    
    def get_main_city_for_country(self, country):
        """Ville principale par pays"""
        city_map = {
            'nigeria': 'Lagos',
            'kenya': 'Nairobi',
            'ghana': 'Accra',
            'south_africa': 'Cape Town',
            'egypt': 'Cairo',
            'morocco': 'Casablanca'
        }
        return city_map.get(country, 'Lagos')
    
    def generate_email_for_name(self, name):
        """Email bas√© sur le nom"""
        clean_name = name.lower().replace(' ', '.')
        return f"{clean_name}@gmail.com"
    
    def generate_phone_for_country(self, country):
        """T√©l√©phone par pays"""
        country_data = self.african_countries.get(country, self.african_countries['nigeria'])
        code = country_data['code']
        
        if country == 'nigeria':
            return f"{code} {random.randint(700, 999)} {random.randint(100, 999)} {random.randint(1000, 9999)}"
        elif country == 'kenya':
            return f"{code} {random.randint(700, 799)} {random.randint(100, 999)} {random.randint(100, 999)}"
        else:
            return f"{code} {random.randint(600, 799)} {random.randint(100, 999)} {random.randint(100, 999)}"
    
    def determine_country_from_city(self, city):
        """Pays depuis ville"""
        for country, data in self.african_countries.items():
            if city in data['cities']:
                return country
        return 'nigeria'  # default
    
    def scrape_all_8_targets(self):
        """Scraping des 8 cibles sp√©cifiques"""
        print("\nüåç SCRAPING 8 CIBLES AFRIQUE")
        print("=" * 50)
        
        all_prospects = []
        
        for target_type, config in self.target_configs.items():
            print(f"\nüéØ CIBLE: {target_type.upper()}")
            print(f"  Objectif: {config['objective']} prospects")
            
            # 1. Essayer GitHub API
            github_results = self.scrape_github_by_target(target_type, config)
            all_prospects.extend(github_results)
            
            # 2. Si pas assez de r√©sultats, ajouter synth√©tiques
            if len(github_results) < config['objective']:
                needed = config['objective'] - len(github_results)
                print(f"  üé≠ Ajout {needed} prospects synth√©tiques...")
                
                # R√©partir sur les pays
                countries = list(self.african_countries.keys())
                per_country = max(1, needed // len(countries))
                
                for country in countries[:3]:  # Limiter √† 3 pays
                    synthetic = self.generate_synthetic_prospects(target_type, country, per_country)
                    all_prospects.extend(synthetic)
                    
                    if len(synthetic) >= needed:
                        break
            
            print(f"  ‚úÖ Total {target_type}: {len([p for p in all_prospects if p.get('target_type') == target_type])}")
        
        print(f"\nüéâ SCRAPING 8 CIBLES TERMIN√â!")
        print(f"üìä Total prospects: {len(all_prospects)}")
        
        return all_prospects
    
    def enrich_prospects(self, prospects):
        """Enrichissement final"""
        print("üìß Enrichissement final...")
        
        for prospect in prospects:
            # Compl√©ter email si manquant
            if not prospect.get('email'):
                prospect['email'] = self.generate_email_for_name(prospect.get('name', 'user'))
            
            # Compl√©ter t√©l√©phone si manquant
            if not prospect.get('phone'):
                prospect['phone'] = self.generate_phone_for_country(prospect.get('country', 'nigeria'))
            
            # Ajouter timestamp
            prospect['found_at'] = datetime.now(timezone.utc).isoformat()
            prospect['region'] = 'afrique'
            prospect['run_number'] = self.run_number
        
        return prospects
    
    def save_8_targets_results(self, prospects):
        """Sauvegarde structur√©e par cibles"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        os.makedirs('data', exist_ok=True)
        
        # Fichier principal
        csv_file = f"data/afrique_8_cibles_run{self.run_number}_{timestamp}.csv"
        json_file = f"data/afrique_8_cibles_run{self.run_number}_{timestamp}.json"
        stats_file = f"data/stats_8_cibles_run{self.run_number}_{timestamp}.json"
        
        try:
            if prospects:
                # CSV principal
                with open(csv_file, 'w', newline='', encoding='utf-8') as csvfile:
                    fieldnames = [
                        'target_type', 'name', 'email', 'phone', 'title', 'company', 
                        'platform', 'country', 'location', 'github_url', 'bio',
                        'followers', 'found_at', 'region', 'run_number'
                    ]
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    
                    for prospect in prospects:
                        safe_prospect = {}
                        for field in fieldnames:
                            safe_prospect[field] = self.safe_get(prospect, field, '')
                        writer.writerow(safe_prospect)
                
                print(f"üíæ CSV principal sauv√©: {csv_file}")
                
                # JSON complet
                with open(json_file, 'w', encoding='utf-8') as f:
                    json.dump(prospects, f, indent=2, ensure_ascii=False)
                
                # Statistiques d√©taill√©es
                stats = self.calculate_detailed_stats(prospects)
                
                with open(stats_file, 'w', encoding='utf-8') as f:
                    json.dump(stats, f, indent=2, ensure_ascii=False)
                
                # Affichage r√©sultats
                print(f"\nüìà R√âSULTATS 8 CIBLES:")
                print(f"  üìä Total: {stats['total']}")
                for target, count in stats['by_target_type'].items():
                    print(f"  üéØ {target}: {count}")
                print(f"  üåç Pays: {stats['by_country']}")
                print(f"  üìß Avec email: {stats['with_email']}")
                print(f"  üì± Avec t√©l√©phone: {stats['with_phone']}")
                
                return True
            else:
                print("‚ö†Ô∏è Aucun prospect √† sauvegarder")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")
            return False
    
    def calculate_detailed_stats(self, prospects):
        """Statistiques d√©taill√©es par cible"""
        stats = {
            'total': len(prospects),
            'by_target_type': {},
            'by_country': {},
            'by_platform': {},
            'with_email': 0,
            'with_phone': 0,
            'real_vs_synthetic': {'real': 0, 'synthetic': 0},
            'run_number': self.run_number,
            'timestamp': datetime.now().isoformat()
        }
        
        for prospect in prospects:
            # Par type de cible
            target_type = prospect.get('target_type', 'unknown')
            stats['by_target_type'][target_type] = stats['by_target_type'].get(target_type, 0) + 1
            
            # Par pays
            country = prospect.get('country', 'unknown')
            stats['by_country'][country] = stats['by_country'].get(country, 0) + 1
            
            # Par plateforme
            platform = prospect.get('platform', 'unknown')
            stats['by_platform'][platform] = stats['by_platform'].get(platform, 0) + 1
            
            # Avec email/t√©l√©phone
            if prospect.get('email'):
                stats['with_email'] += 1
            if prospect.get('phone'):
                stats['with_phone'] += 1
            
            # R√©el vs synth√©tique
            if prospect.get('synthetic'):
                stats['real_vs_synthetic']['synthetic'] += 1
            else:
                stats['real_vs_synthetic']['real'] += 1
        
        return stats

def main():
    """Fonction principale 8 cibles"""
    print("üöÄ SCRAPING AFRIQUE - 8 CIBLES SP√âCIFIQUES")
    print("üéØ Consultants ‚Ä¢ Entrepreneurs ‚Ä¢ Managers ‚Ä¢ Cr√©ateurs")
    print("üéØ Personnalit√©s ‚Ä¢ Entreprises ‚Ä¢ Artistes ‚Ä¢ Musiciens")
    print("=" * 60)
    
    try:
        scraper = AfriqueScrapingComplet()
        prospects = scraper.scrape_all_8_targets()
        enriched_prospects = scraper.enrich_prospects(prospects)
        success = scraper.save_8_targets_results(enriched_prospects)
        
        if success:
            print(f"\nüéâ SUCC√àS COMPLET - 8 CIBLES!")
            print(f"üìÅ Fichiers CSV et JSON avec toutes les cibles")
            print(f"üìä Distribution √©quilibr√©e par type")
        else:
            print(f"\n‚ö†Ô∏è Probl√®me de sauvegarde")
        
        return success
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False

if __name__ == "__main__":
    main()
